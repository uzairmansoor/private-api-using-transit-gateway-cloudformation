AWSTemplateFormatVersion: 2010-09-09
Description: Template to deploy consumer VPC and it's components
Parameters:
  project:
    Type: String
    Description: Project Name
  app:
    Type: String
    Description: App name
  env:
    Type: String
    Description: Environment name
  vpcCidrBlock:
    Type: String
    Description: IPv4 network range for the VPC
  publicSubnet1CidrBlock:
    Type: String
    Default: ""
    Description: IPv4 CIDR block assigned to subnet 1
  publicSubnet2CidrBlock:
    Type: String
    Default: ""
    Description: IPv4 CIDR block assigned to subnet 2
  privateSubnet1CidrBlock:
    Type: String
    Default: ""
    Description: IPv4 CIDR block assigned to subnet 1
  privateSubnet2CidrBlock:
    Type: String
    Default: ""
    Description: IPv4 CIDR block assigned to subnet 2
  availabilityZone1:
    Type: String
    Description: Availabilty Zone for subnet 1
  availabilityZone2:
    Type: String
    Description: Availabilty Zone for subnet 2
  destinationCidrBlock:
    Type: String
    Description: Destination CIDR Block
  dnsHostnames:
    Type: String
    Description: Indicates whether the instances launched in the VPC get DNS hostnames
  dnsSupport:
    Type: String
    Description: Indicates whether the DNS resolution is supported for the VPC
  mapPublicIp:
    Type: String
    Description: Indicates whether instances launched in this subnet receive a public IPv4 address
  # shareTransitGatewayId:
  #   Type: String
  #   Description: Id of the transit gateway created in shared account
  # sharedVpcCidrBlock:
  #   Type: String
  #   Description: IPv4 network range for the VPC created in shared account

Conditions:
  isAZ1: !Not [!Equals [!Ref publicSubnet1CidrBlock, ""]]
  isAZ2: !Not [!Equals [!Ref publicSubnet2CidrBlock, ""]]
Resources:
  vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref vpcCidrBlock
      EnableDnsSupport: !Ref dnsSupport
      EnableDnsHostnames: !Ref dnsHostnames
      Tags:
        - Key: Name
          Value: !Sub ${project}-${app}-${env}-vpc
        - Key: project
          Value: !Ref project
        - Key: app
          Value: !Ref app
        - Key: environment
          Value: !Ref env
  publicSubnet1:
    Condition: isAZ1
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref vpc
      CidrBlock: !Ref publicSubnet1CidrBlock
      AvailabilityZone: !Ref availabilityZone1
      MapPublicIpOnLaunch: !Ref mapPublicIp
      Tags:
        - Key: Name
          Value: !Sub ${project}-${app}-${env}-publicSubnet1
        - Key: project
          Value: !Ref project
        - Key: app
          Value: !Ref app
        - Key: environment
          Value: !Ref env
  publicSubnet2:
    Condition: isAZ2
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref vpc
      CidrBlock: !Ref publicSubnet2CidrBlock
      AvailabilityZone: !Ref availabilityZone2
      MapPublicIpOnLaunch: !Ref mapPublicIp
      Tags:
        - Key: Name
          Value: !Sub ${project}-${app}-${env}-publicSubnet2
        - Key: project
          Value: !Ref project
        - Key: app
          Value: !Ref app
        - Key: environment
          Value: !Ref env
  publicRouteTable1:
    Condition: isAZ1
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref vpc
      Tags:
        - Key: Name
          Value: !Sub ${project}-${app}-${env}-publicRouteTable1
        - Key: project
          Value: !Ref project
        - Key: app
          Value: !Ref app
        - Key: environment
          Value: !Ref env
  publicRouteTable2:
    Condition: isAZ2
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref vpc
      Tags:
        - Key: Name
          Value: !Sub ${project}-${app}-${env}-publicRouteTable2
        - Key: project
          Value: !Ref project
        - Key: app
          Value: !Ref app
        - Key: environment
          Value: !Ref env
  internetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: vpc
  internetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref vpc
      InternetGatewayId: !Ref internetGateway
  publicRoute1:
    Condition: isAZ1
    Type: AWS::EC2::Route
    DependsOn: internetGatewayAttachment
    Properties:
      RouteTableId: !Ref publicRouteTable1
      DestinationCidrBlock: !Ref destinationCidrBlock
      GatewayId: !Ref internetGateway
  publicRoute2:
    Condition: isAZ2
    Type: AWS::EC2::Route
    DependsOn: internetGatewayAttachment
    Properties:
      RouteTableId: !Ref publicRouteTable2
      DestinationCidrBlock: !Ref destinationCidrBlock
      GatewayId: !Ref internetGateway
  publicNetworkAcl1:
    Condition: isAZ1
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref vpc
      Tags:
        - Key: Name
          Value: !Sub ${project}-${app}-${env}-publicAcl1
        - Key: project
          Value: !Ref project
        - Key: app
          Value: !Ref app
        - Key: environment
          Value: !Ref env
  inboundRule:
    Condition: isAZ1
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref publicNetworkAcl1
      RuleNumber: 100
      Protocol: -1
      RuleAction: Allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 1
        To: 65535
  outboundRule:
    Condition: isAZ1
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref publicNetworkAcl1
      RuleNumber: 110
      Protocol: -1
      Egress: true
      RuleAction: Allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 1
        To: 65535
  publicNetworkAcl2:
    Condition: isAZ2
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref vpc
      Tags:
        - Key: Name
          Value: !Sub ${project}-${app}-${env}-publicAcl2
        - Key: project
          Value: !Ref project
        - Key: app
          Value: !Ref app
        - Key: environment
          Value: !Ref env
  acl2inboundRule:
    Condition: isAZ2
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref publicNetworkAcl2
      RuleNumber: 100
      Protocol: -1
      RuleAction: Allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 1
        To: 65535
  acl2outboundRule:
    Condition: isAZ2
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref publicNetworkAcl2
      RuleNumber: 110
      Protocol: -1
      Egress: true
      RuleAction: Allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 1
        To: 65535
  publicSubnet1RouteTableAssociation:
    Condition: isAZ1
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref publicSubnet1
      RouteTableId: !Ref publicRouteTable1
  publicSubnet2RouteTableAssociation:
    Condition: isAZ2
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref publicSubnet2
      RouteTableId: !Ref publicRouteTable2
  publicSubnet1ClassAssociation:
    Condition: isAZ1
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref publicSubnet1
      NetworkAclId: !Ref publicNetworkAcl1
  publicSubnet2ClassAssociation:
    Condition: isAZ2
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref publicSubnet2
      NetworkAclId: !Ref publicNetworkAcl2

  privateSubnet1:
    Condition: isAZ1
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref vpc
      CidrBlock: !Ref privateSubnet1CidrBlock
      AvailabilityZone: !Ref availabilityZone1
      Tags:
        - Key: Name
          Value: !Sub ${project}-${app}-${env}-privateSubnet1
        - Key: project
          Value: !Ref project
        - Key: app
          Value: !Ref app
        - Key: environment
          Value: !Ref env
  privateSubnet2:
    Condition: isAZ2
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref vpc
      CidrBlock: !Ref privateSubnet2CidrBlock
      AvailabilityZone: !Ref availabilityZone2
      Tags:
        - Key: Name
          Value: !Sub ${project}-${app}-${env}-privateSubnet2
        - Key: project
          Value: !Ref project
        - Key: app
          Value: !Ref app
        - Key: environment
          Value: !Ref env
  privateRouteTable1:
    Condition: isAZ1
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref vpc
      Tags:
        - Key: Name
          Value: !Sub ${project}-${app}-${env}-privateRouteTable1
        - Key: project
          Value: !Ref project
        - Key: app
          Value: !Ref app
        - Key: environment
          Value: !Ref env
  privateRouteTable2:
    Condition: isAZ2
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref vpc
      Tags:
        - Key: Name
          Value: !Sub ${project}-${app}-${env}-privateRouteTable2
        - Key: project
          Value: !Ref project
        - Key: app
          Value: !Ref app
        - Key: environment
          Value: !Ref env
  privateSubnet1RouteTableAssociation:
    Condition: isAZ1
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref privateSubnet1
      RouteTableId: !Ref privateRouteTable1
  privateSubnet2RouteTableAssociation:
    Condition: isAZ2
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref privateSubnet2
      RouteTableId: !Ref privateRouteTable2
  natGateway1:
    Condition: isAZ1
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt elasticIpAddress1.AllocationId
      SubnetId: !Ref publicSubnet1
      Tags:
        - Key: Name
          Value: !Sub ${project}-${app}-${env}-natGateway1
        - Key: project
          Value: !Ref project
        - Key: app
          Value: !Ref app
        - Key: environment
          Value: !Ref env
  
  privateRoute1:
    Condition: isAZ1
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref privateRouteTable1
      DestinationCidrBlock: !Ref destinationCidrBlock
      NatGatewayId: !Ref natGateway1
  privateRoute2:
    Condition: isAZ2
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref privateRouteTable2
      DestinationCidrBlock: !Ref destinationCidrBlock
      NatGatewayId: !Ref natGateway1
 
  elasticIpAddress1:
    Condition: isAZ1
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  privateNetworkAcl1:
    Condition: isAZ1
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref vpc
      Tags:
        - Key: Name
          Value: !Sub ${project}-${app}-${env}-privateAcl
        - Key: project
          Value: !Ref project
        - Key: app
          Value: !Ref app
        - Key: environment
          Value: !Ref env
  privateInboundRule:
    Condition: isAZ1
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref privateNetworkAcl1
      RuleNumber: 100
      Protocol: -1
      RuleAction: Allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 22
        To: 22
  privateOutboundRule:
    Condition: isAZ1
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref privateNetworkAcl1
      RuleNumber: 110
      Protocol: -1
      Egress: true
      RuleAction: Allow
      CidrBlock: 0.0.0.0/0
  privateNetworkAcl2:
    Condition: isAZ2
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref vpc
      Tags:
        - Key: Name
          Value: !Sub ${project}-${app}-${env}-privateAcl2
        - Key: project
          Value: !Ref project
        - Key: app
          Value: !Ref app
        - Key: environment
          Value: !Ref env
  nacl2privateInboundRule:
    Condition: isAZ2
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref privateNetworkAcl2
      RuleNumber: 100
      Protocol: -1
      RuleAction: Allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 22
        To: 22
  nacl2privateOutboundRule:
    Condition: isAZ2
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref privateNetworkAcl2
      RuleNumber: 110
      Protocol: -1
      Egress: true
      RuleAction: Allow
      CidrBlock: 0.0.0.0/0
  privateSubnet1ClassAssociation:
    Condition: isAZ1
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref privateSubnet1
      NetworkAclId: !Ref privateNetworkAcl1
  privateSubnet2ClassAssociation:
    Condition: isAZ2
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref privateSubnet2
      NetworkAclId: !Ref privateNetworkAcl2
Outputs:
  vpc:
    Description: Vpc Id
    Value: !Ref vpc
    Export:
      Name: !Sub "${project}-${app}-${env}-vpc"
  publicSubnet1:
    Description: Public Subnet 1 Id
    Value: !Ref publicSubnet1
    Export:
      Name: !Sub "${project}-${app}-${env}-publicSubnet1"
  publicSubnet2:
    Description: Public Subnet 2 Id
    Value: !Ref publicSubnet2
    Export:
      Name: !Sub "${project}-${app}-${env}-publicSubnet2"
  privateSubnet1:
    Description: Private Subnet 1 Id
    Value: !Ref privateSubnet1
    Export:
      Name: !Sub "${project}-${app}-${env}-privateSubnet1"
  privateSubnet2:
    Description: Private Subnet 2 Id
    Value: !Ref privateSubnet2
    Export:
      Name: !Sub "${project}-${app}-${env}-privateSubnet2"
  internetGateway:
    Description: Internet Gateway Id
    Value: !Ref internetGateway
    Export:
      Name: !Sub "${project}-${app}-${env}-internetGateway"
  natGateway1:
    Description: NAT Gateway 1 Id
    Value: !Ref natGateway1
    Export:
      Name: !Sub "${project}-${app}-${env}-natGateway1"
  privateRouteTable1:
    Description: Route Table Id For Private Subnet
    Value: !Ref privateRouteTable1
    Export:
      Name: !Sub "${project}-${app}-${env}-privateRouteTable1"
  privateRouteTable2:
    Description: Route Table Id For Private Subnet
    Value: !Ref privateRouteTable2
    Export:
      Name: !Sub "${project}-${app}-${env}-privateRouteTable2"
  publicRouteTable1:
    Description: Route Table  Id For Public Subnet
    Value: !Ref publicRouteTable1
    Export:
      Name: !Sub "${project}-${app}-${env}-publicRouteTable1"
  publicRouteTable2:
    Description: Route Table  Id For Public Subnet
    Value: !Ref publicRouteTable2
    Export:
      Name: !Sub "${project}-${app}-${env}-publicRouteTable2"
  privateNetworkAcl1:
    Description: Private Network ACL 1 Id
    Value: !Ref privateNetworkAcl1
    Export:
      Name: !Sub "${project}-${app}-${env}-privateNetworkAcl1"
  publicnetworkAcl1:
    Description: Public Network ACL 1 Id
    Value: !Ref publicNetworkAcl1
    Export:
      Name: !Sub "${project}-${app}-${env}-publicNetworkAcl1"
  privateNetworkAcl2:
    Description: Private Network ACL 2 Id
    Value: !Ref privateNetworkAcl2
    Export:
      Name: !Sub "${project}-${app}-${env}-privateNetworkAcl2"
  publicnetworkAcl2:
    Description: Public Network ACL 2 Id
    Value: !Ref publicNetworkAcl2
    Export:
      Name: !Sub "${project}-${app}-${env}-publicNetworkAcl2"
