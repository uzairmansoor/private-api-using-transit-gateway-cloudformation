AWSTemplateFormatVersion: 2010-09-09
Description: Template to deploy security groups
Parameters:
  project:
    Type: String
    Default: tgwsp
    Description: Project Name
  app:
    Type: String
    Default: app
    Description: App name
  env:
    Type: String
    AllowedValues:
      - dev
      - qa
      - uat
      - prod
    Default: dev
    Description: Environment name
  vpcIdServiceProvider:
    Type: String
    Description: VPC ID to launch the SGs in

Resources:
#SG EC2 connect endpoint service provider
  sgEc2ConnectEndpointServiceProvider:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub "${project}-${env}-${app}-sgEc2ConnectEndpointServiceProvider"
      VpcId: !Ref vpcIdServiceProvider
      Tags:
        - Key: Name
          Value: !Sub "${project}-${env}-${app}-sgEc2ConnectEndpointServiceProvider"
        - Key: project
          Value: !Ref project
        - Key: environment
          Value: !Ref env
        - Key: app
          Value: !Ref app
  sgEc2ConnectEndpointServiceProviderSshIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref sgEc2ConnectEndpointServiceProvider
      Description: ssh access on port 22
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: 0.0.0.0/0
  sgEc2ConnectEndpointServiceProviderIcmpIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref sgEc2ConnectEndpointServiceProvider
      Description: icmp access
      IpProtocol: icmp
      FromPort: -1
      ToPort: -1
      CidrIp: 0.0.0.0/0


# security group for ec2
  ec2SecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: !Sub "${project}-${env}-${app}-ec2SecurityGroup"
      VpcId: !Ref vpcIdServiceProvider
      GroupDescription: Security group to allow access to Client
      SecurityGroupIngress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "${project}-${app}-${env}-ec2SecurityGroup"
        - Key: project
          Value: !Ref project
        - Key: app
          Value: !Ref app
        - Key: environment
          Value: !Ref env

# sg for nlb
  sgNetworklb:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub "${project}-${env}-${app}-sgNetworklb"
      VpcId: !Ref vpcIdServiceProvider
      Tags:
        - Key: Name
          Value: !Sub "${project}-${env}-${app}-sgNetworklb"
        - Key: project
          Value: !Ref project
        - Key: environment
          Value: !Ref env
        - Key: app
          Value: !Ref app
 
  sghttpNetworklb:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref sgNetworklb
      Description: access on port 80
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: 0.0.0.0/0

  sgSsh5000Networklb:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref sgNetworklb
      Description: access on port 5000
      IpProtocol: tcp
      FromPort: 5000
      ToPort: 5000
      CidrIp: 0.0.0.0/0

  sgNetworklbEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref sgNetworklb
      Description: all traffic access
      IpProtocol: -1
      FromPort: -1
      ToPort: -1
      CidrIp: 0.0.0.0/0



Outputs:
  sgEc2ConnectEndpointServiceProvider:
    Value: !GetAtt sgEc2ConnectEndpointServiceProvider.GroupId
    Export:
      Name: !Sub "${project}-${env}-${app}-sg-ec2ConnectEndpoint"
  ec2SecurityGroup:
    Description: The EC2 Security Group Id
    Value: !Ref ec2SecurityGroup
    Export:
      Name: !Sub "${project}-${app}-${env}-ec2SecurityGroup"
  sgNetworklb:
    Description: The nlb Security Group Id
    Value: !Ref sgNetworklb
    Export:
      Name: !Sub "${project}-${app}-${env}-sgNetworklb"
