AWSTemplateFormatVersion: "2010-09-09"
Description: Template to deploy EC2
Parameters:
  project:
    Type: String
    Description: Project Name
  app:
    Type: String
    Description: App name
  env:
    Type: String
    AllowedValues:
      - dev
      - qa
      - uat
      - prod
    Description: Environment name
  ec2EnableEndpoint:
    Type: String
    Default: yes
    AllowedValues: [yes, no]
    Description: Specify whether to enable EC2 endpoint connect service or not
  ec2EndpointIdentifier:
    Type: String
    Default: ""
    Description: Unique identifier for EC2 endpoint(applicable iff EC2 endpoint is enabled)
  ec2EndpointPreserveClientIp:
    Type: String
    Default: true
    AllowedValues: [true, false]
    Description: Select true to preserve client IP for tracking , false otherwise(applicable iff EC2 endpoint is enabled)
  ec2EndpointSgIds:
    Type: AWS::EC2::SecurityGroup::Id
    Default: ""
    Description: Security group IDs for EC2 endpoint(applicable iff EC2 endpoint is enabled)
  ec2EndpointPrivateSubnetId:
    Type: AWS::EC2::Subnet::Id
    Default: ""
    Description: The private subnet ID to create EC2 endpoint in(applicable iff EC2 endpoint is enabled)
  imageId:
    Type: String
    Description: The ID of the AMI
  availabilityZone:
    Type: String
    Description: The Availability Zone of the instance
  instanceType:
    Type: String
    Description: The Instance type
  keyName:
    Type: String
    Description: The Name of the key pair
  securityGroupId:
    Type: String
    Description: The Security group ID
  subnetId:
    Type: String
    Description: The Subnet ID
  artifactsBucketName:
    Type: String
    Description: Name of bucket to store artifacts


Conditions:
  isEnableEc2EndpointService: !Equals [!Ref ec2EnableEndpoint, yes]
Resources:
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [!Ref IAMRole]

  ec2EndpointConnect:
    Type: AWS::EC2::InstanceConnectEndpoint
    Condition: isEnableEc2EndpointService
    Properties:
      ClientToken: !Ref ec2EndpointIdentifier
      PreserveClientIp: !Ref ec2EndpointPreserveClientIp
      SecurityGroupIds:
        - !Ref ec2EndpointSgIds
      SubnetId: !Ref ec2EndpointPrivateSubnetId
      Tags:
        - Key: Name
          Value: !Sub "${project}-${env}-${app}-endpointConnect"
        - Key: project
          Value: !Ref project
        - Key: environment
          Value: !Ref env
        - Key: app
          Value: !Ref app

  IAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ec2.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: allow-downloading-artifact
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - s3:GetObject
            - s3:ListBucket
            Resource: !Sub "arn:aws:s3:::*/*"

  ec2Instance:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: !Ref imageId
      InstanceType: !Ref instanceType
      AvailabilityZone: !Ref availabilityZone
      KeyName: !Ref keyName
      IamInstanceProfile: !Ref InstanceProfile
      SubnetId: !Ref subnetId
      SecurityGroupIds:
        - !Ref securityGroupId
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo su
          sudo yum update -y
          cd /home/ec2-user/
          sudo dnf update -y
          sudo dnf install python3 -y
          python3 --version
          aws s3 cp s3://${artifactsBucketName}/app-code/main.py /home/ec2-user/
          python3 -m venv .venv
          . .venv/bin/activate
          pip install Flask
          sudo yum install tmux -y
          sudo yum install python-pip -y
          pip install flask
          tmux new -s flaskapp
          export FLASK_APP=main
          flask run --host=0.0.0.0
      Tags:
        - Key: Name
          Value: !Sub "${project}-${app}-${env}-ec2"
        - Key: project
          Value: !Ref project
        - Key: app
          Value: !Ref app
        - Key: environment
          Value: !Ref env
Outputs:
  ec2EndpointConnect:
    Condition: isEnableEc2EndpointService
    Description: EC2 Instance Connect EndPoint Id
    Value: !Ref ec2EndpointConnect
    Export:
      Name: !Sub "${project}-${env}-${app}-endpointConnect-${AWS::Region}"
  ec2Instance:
    Description: Ec2 Instance Id
    Value: !Ref ec2Instance
    Export:
      Name: !Sub "${project}-${app}-${env}-ec2Instance"