AWSTemplateFormatVersion: '2010-09-09'
Description: "cfn private-api twg executor"
Parameters:
  project:
    Type: String
    Default: tgwsp
    Description: Project Name
  app:
    Type: String
    Default: app
    Description: App name
  env:
    Type: String
    AllowedValues:
      - dev
      - qa
      - uat
      - prod
    Default: dev
    Description: Environment name
  s3ArtifactPath:
    Type: String
    Default: "https://tgw-sp-blog-app-dev-us-east-1-570720296911.s3.amazonaws.com/code/cfn/services"
    Description: "Artifact bucket path"

Resources:
  vpcServiceProvider:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${s3ArtifactPath}/vpc/vpc-app.yml"
      Parameters:
        project: !Ref project
        app: !Ref app
        env: !Ref env
        vpcCidrBlock: 10.20.0.0/16
        publicSubnet1CidrBlock: 10.20.0.0/20
        publicSubnet2CidrBlock: 10.20.16.0/20
        privateSubnet1CidrBlock: 10.20.128.0/20
        privateSubnet2CidrBlock: 10.20.144.0/20
        availabilityZone1: us-east-1a
        availabilityZone2: us-east-1b
        destinationCidrBlock: 0.0.0.0/0
        dnsHostnames: "true"
        dnsSupport: "true"
        mapPublicIp: "true"
      Tags:
        - Key: project
          Value: !Ref project
        - Key: environment
          Value: !Ref env
        - Key: app
          Value: !Ref app
  
  securitygroup:
    DependsOn:
    - vpcServiceProvider
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${s3ArtifactPath}/securitygroup/sg-app.yml"
      Parameters:
        project: !Ref project
        app: !Ref app
        env: !Ref env
        vpcIdServiceProvider: !GetAtt vpcServiceProvider.Outputs.vpc
      Tags:
        - Key: project
          Value: !Ref project
        - Key: environment
          Value: !Ref env
        - Key: app
          Value: !Ref app

  ec2: 
    DependsOn:
    - vpcServiceProvider
    - securitygroup
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${s3ArtifactPath}/ec2/ec2-app.yml"
      Parameters:
        ec2EnableEndpoint: yes #yes/no
        ec2EndpointIdentifier: !Sub "${project}-${env}-${app}-endpointConnect"
        ec2EndpointPreserveClientIp: true #true/false
        ec2EndpointPrivateSubnetId: !GetAtt vpcServiceProvider.Outputs.privateSubnet1
        ec2EndpointSgIds: !GetAtt securitygroup.Outputs.sgEc2ConnectEndpointServiceProvider
        artifactsBucketName: tgw-sp-blog-app-dev-us-east-1-570720296911
        project: !Ref project
        app: !Ref app
        env: !Ref env
        imageId: ami-066784287e358dad1
        availabilityZone: us-east-1a
        instanceType: t2.micro
        keyName: !Sub "${project}-${app}-${env}-${AWS::Region}-KP"
        securityGroupId: !GetAtt securitygroup.Outputs.ec2SecurityGroup
        subnetId: !GetAtt vpcServiceProvider.Outputs.privateSubnet1
      Tags:
        - Key: project
          Value: !Ref project
        - Key: environment
          Value: !Ref env
        - Key: app
          Value: !Ref app
  
  nlb:
    DependsOn:
    - vpcServiceProvider
    - securitygroup
    - ec2
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${s3ArtifactPath}/nlb/nlb-app.yml"
      Parameters:
        project: !Ref project
        app: !Ref app
        env: !Ref env
        vpc:  !GetAtt vpcServiceProvider.Outputs.vpc
        subnet1:  !GetAtt vpcServiceProvider.Outputs.privateSubnet1
        subnet2: !GetAtt vpcServiceProvider.Outputs.privateSubnet2
        lbIpAddressType: ipv4
        name: !Sub ${project}-${env}-nlb
        scheme: internal
        elbType: network
        deletionProtectionEnabled: false
        crossZoneLBEnabled: false
        tcpPort: "80"
        tcpListenerDefaultActionType: forward
        healthCheckEnabled: true
        healthCheckIntervalSeconds: 30
        healthCheckPort: "traffic-port"
        nlbHealthCheckProtocol: TCP
        healthCheckTimeoutSeconds: 10
        healthyThresholdCount: 3
        ipAddressType: ipv4
        nlbTargetPort: 5000
        nlbTargetProtocol: TCP
        targetType: instance
        stickinessEnabled: false
        targetDeregistrationDelay: 300
        deregistrationConnectionTerminationEnabled: false
        preserveClientIPEnabled: true
        proxyProtocolV2Enabled: false
        targetResourceId: !GetAtt ec2.Outputs.ec2Instance
        targetResource1Port: "5000"
        sgNetworklb: !GetAtt securitygroup.Outputs.sgNetworklb
      Tags:
        - Key: project
          Value: !Ref project
        - Key: environment
          Value: !Ref env
        - Key: app
          Value: !Ref app

  privateVpcLink:
    DependsOn:
    - vpcServiceProvider
    - securitygroup
    - nlb
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${s3ArtifactPath}/apigateway/apigateway-vpclink.yml"
      Parameters:
        project: !Ref project
        app: !Ref app
        env: !Ref env
        TargetArns: !GetAtt nlb.Outputs.nlb
      Tags:
        - Key: project
          Value: !Ref project
        - Key: environment
          Value: !Ref env
        - Key: app
          Value: !Ref app

  privateApi:
    DependsOn:
    - vpcServiceProvider
    - securitygroup
    - nlb
    - ec2
    - privateVpcLink
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${s3ArtifactPath}/apigateway/apigateway-app.yml"
      Parameters:
        project: !Ref project
        app: !Ref app
        env: !Ref env
        apiKeySourceType: HEADER
        endpointType: PRIVATE
        vpcEndpointIds: vpce-0e6c9b948f8049db3
        apiStageName: DEV
        apiProductsResourcePath: products
        apiCustomersResourcePath: customers
        apiGatewayHTTPMethod: GET
        apiAuthorizationType: NONE
        methodStatusCode: 200
        integrationConnectionType: VPC_LINK
        integrationPassthroughBehavior: WHEN_NO_MATCH
        integrationTimeoutInMillis: 29000
        rootMethodBackendtype: HTTP_PROXY
        otherMethodsBackendtype: HTTP
        connectionId: !GetAtt privateVpcLink.Outputs.apiGatewayVpcLinkId
        integrationUri: !GetAtt nlb.Outputs.nlbDns
      Tags:
        - Key: project
          Value: !Ref project
        - Key: environment
          Value: !Ref env
        - Key: app
          Value: !Ref app
        

Outputs:
  vpcServiceProvider:
    Value: !Ref vpcServiceProvider
    Export: 
      Name: !Sub "${AWS::StackName}-vpcServiceProvider"
  securitygroup:
    Value: !Ref securitygroup
    Export: 
      Name: !Sub "${AWS::StackName}-securitygroup"
  ec2:
    Description: ec2 server
    Value: !Ref ec2
    Export:
      Name: !Sub "${AWS::StackName}-ec2"
  nlb:
    Description: nlb for Service Provider Api Server
    Value: !Ref nlb
    Export:
      Name: !Sub "${AWS::StackName}-nlb"
  privateVpcLink:
    Description: vpc link for apis
    Value: !Ref privateVpcLink
    Export:
      Name: !Sub "${AWS::StackName}-privateVpcLink"
  privateApi:
    Description: private api
    Value: !Ref privateApi
    Export: 
      Name: !Sub "${AWS::StackName}-privateApi"